<?xml version="1.0" encoding="UTF-8"?>
<yguard version="1.5">
<!--
  yGuard Bytecode Obfuscator, v3.1.0, a Product of yWorks GmbH - http://www.yworks.com

  Logfile created on Tue Sep 06 16:45:24 COT 2022

  Jar file to be obfuscated:           devices-0.0.1-SNAPSHOT.jar
  Target Jar file for obfuscated code: yguard_temp_11234569031951633062.jar

-->
<!-- WARNING
Methods are called which may break in obfuscated version at runtime.
Please review your source code to ensure that the dangerous methods are not intended
to act on classes which have been obfuscated.
-->
<!--
     Your class org.springframework.boot.loader.jar.JarFileEntries calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class org.springframework.boot.loader.LaunchedURLClassLoader calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String, boolean)
     Your class org.springframework.boot.loader.LaunchedURLClassLoader calls the java.lang.ClassLoader method java.lang.Class defineClass(java.lang.String, byte[], int, int)
-->
<!--
     Your class org.springframework.boot.loader.MainMethodRunner calls the java.lang.Class method java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])
-->
<!--
  Memory in use after class data structure built: 36989832 bytes
  Total memory available                        : 134217728 bytes
-->
<expose>
  <class name="com.monitev.devices.DevicesApplication"/>
  <method class="com.monitev.devices.DevicesApplication" name="void main(java.lang.String[])"/>
</expose>
<map>
  <package name="com.monitev.devices.controller" map="A"/>
  <class name="com.monitev.devices.controller.DeviceDataController" map="A"/>
  <field class="com.monitev.devices.controller.DeviceDataController" name="iDeviceData" map="A"/>
  <field class="com.monitev.devices.controller.DeviceDataController" name="iBrokerMqtt" map="B"/>
  <method class="com.monitev.devices.controller.DeviceDataController" name="org.springframework.http.ResponseEntity generarBackupDevice(java.lang.String)" map="A"/>
  <method class="com.monitev.devices.controller.DeviceDataController" name="org.springframework.http.ResponseEntity subscribeTopic()" map="A"/>
  <package name="com.monitev.devices.exception" map="B"/>
  <class name="com.monitev.devices.exception.ExceptionResponse" map="A"/>
  <field class="com.monitev.devices.exception.ExceptionResponse" name="details" map="A"/>
  <field class="com.monitev.devices.exception.ExceptionResponse" name="message" map="B"/>
  <field class="com.monitev.devices.exception.ExceptionResponse" name="timestamp" map="C"/>
  <field class="com.monitev.devices.exception.ExceptionResponse" name="serialVersionUID" map="D"/>
  <method class="com.monitev.devices.exception.ExceptionResponse" name="java.lang.String getMessage()" map="getMessage"/>
  <method class="com.monitev.devices.exception.ExceptionResponse" name="java.util.Date getTimestamp()" map="A"/>
  <method class="com.monitev.devices.exception.ExceptionResponse" name="java.lang.String getDetails()" map="B"/>
  <package name="com.monitev.devices.constantes" map="C"/>
  <class name="com.monitev.devices.constantes.Constantes" map="A"/>
  <field class="com.monitev.devices.constantes.Constantes" name="URL_API" map="A"/>
  <field class="com.monitev.devices.constantes.Constantes" name="VAR_PASSWORD" map="B"/>
  <field class="com.monitev.devices.constantes.Constantes" name="MNS_CAMPO_REQUERIDO" map="C"/>
  <field class="com.monitev.devices.constantes.Constantes" name="URL_BASE" map="D"/>
  <field class="com.monitev.devices.constantes.Constantes" name="MNS_ERROR_INICIO_SESION" map="E"/>
  <field class="com.monitev.devices.constantes.Constantes" name="VAR_URL_BASE" map="F"/>
  <field class="com.monitev.devices.constantes.Constantes" name="USERNAME_PC" map="G"/>
  <field class="com.monitev.devices.constantes.Constantes" name="URL_GENERAR_BACKUP" map="H"/>
  <field class="com.monitev.devices.constantes.Constantes" name="NOM_ARCHIVO" map="I"/>
  <field class="com.monitev.devices.constantes.Constantes" name="CUSTOMER_ID" map="J"/>
  <field class="com.monitev.devices.constantes.Constantes" name="FORMAT_DATE" map="K"/>
  <field class="com.monitev.devices.constantes.Constantes" name="VAR_USERNAME" map="L"/>
  <field class="com.monitev.devices.constantes.Constantes" name="URL_SUBSCRUBE_TOPIC" map="M"/>
  <field class="com.monitev.devices.constantes.Constantes" name="MNS_ERROR_BACKUP" map="N"/>
  <field class="com.monitev.devices.constantes.Constantes" name="PATH" map="O"/>
  <package name="com.monitev.devices.services" map="D"/>
  <package name="com.monitev.devices.services.devicesData" map="A"/>
  <class name="com.monitev.devices.services.devicesData.IDeviceData" map="A"/>
  <method class="com.monitev.devices.services.devicesData.IDeviceData" name="java.util.Map generarBackup(java.lang.String)" map="A"/>
  <package name="com.monitev.devices.services.brokermqtt" map="B"/>
  <package name="com.monitev.devices.services.brokermqtt.impl" map="A"/>
  <class name="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber$1" map="1"/>
  <field class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber$1" name="this$0" map="A"/>
  <method class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber$1" name="void deliveryComplete(org.eclipse.paho.client.mqttv3.IMqttDeliveryToken)" map="deliveryComplete"/>
  <method class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber$1" name="void connectionLost(java.lang.Throwable)" map="connectionLost"/>
  <method class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber$1" name="void messageArrived(java.lang.String, org.eclipse.paho.client.mqttv3.MqttMessage)" map="messageArrived"/>
  <class name="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber" map="A"/>
  <field class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber" name="clientId" map="A"/>
  <field class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber" name="LOGGER" map="B"/>
  <field class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber" name="topic" map="C"/>
  <field class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber" name="brokerUrl" map="D"/>
  <method class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber" name="void subscribe()" map="B"/>
  <method class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber" name="void deliveryComplete(org.eclipse.paho.client.mqttv3.IMqttDeliveryToken)" map="deliveryComplete"/>
  <method class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber" name="java.util.Map subscribeTopic()" map="A"/>
  <method class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber" name="void connectionLost(java.lang.Throwable)" map="connectionLost"/>
  <method class="com.monitev.devices.services.brokermqtt.impl.MqttSubscriber" name="void messageArrived(java.lang.String, org.eclipse.paho.client.mqttv3.MqttMessage)" map="messageArrived"/>
  <class name="com.monitev.devices.services.brokermqtt.IBrokerMqtt" map="A"/>
  <method class="com.monitev.devices.services.brokermqtt.IBrokerMqtt" name="java.util.Map subscribeTopic()" map="A"/>
  <package name="com.monitev.devices.services.deviceData" map="C"/>
  <package name="com.monitev.devices.services.deviceData.impl" map="A"/>
  <class name="com.monitev.devices.services.deviceData.impl.DevicesData$1" map="1"/>
  <field class="com.monitev.devices.services.deviceData.impl.DevicesData$1" name="this$0" map="A"/>
  <field class="com.monitev.devices.services.deviceData.impl.DevicesData$1" name="val$deviceId" map="B"/>
  <method class="com.monitev.devices.services.deviceData.impl.DevicesData$1" name="org.thingsboard.server.common.data.EntityType getEntityType()" map="getEntityType"/>
  <method class="com.monitev.devices.services.deviceData.impl.DevicesData$1" name="java.util.UUID getId()" map="getId"/>
  <class name="com.monitev.devices.services.deviceData.impl.DevicesData" map="A"/>
  <field class="com.monitev.devices.services.deviceData.impl.DevicesData" name="env" map="A"/>
  <method class="com.monitev.devices.services.deviceData.impl.DevicesData" name="java.util.Map generarBackup(java.lang.String)" map="A"/>
  <package name="com.monitev.devices.dto" map="E"/>
  <class name="com.monitev.devices.dto.DeviceDataDTO" map="A"/>
  <field class="com.monitev.devices.dto.DeviceDataDTO" name="nombreVariable" map="A"/>
  <field class="com.monitev.devices.dto.DeviceDataDTO" name="valorVariable" map="B"/>
  <field class="com.monitev.devices.dto.DeviceDataDTO" name="tiempo" map="C"/>
  <field class="com.monitev.devices.dto.DeviceDataDTO" name="serialVersionUID" map="D"/>
  <method class="com.monitev.devices.dto.DeviceDataDTO" name="long getTiempo()" map="A"/>
  <method class="com.monitev.devices.dto.DeviceDataDTO" name="void setNombreVariable(java.lang.String)" map="A"/>
  <method class="com.monitev.devices.dto.DeviceDataDTO" name="void setTiempo(long)" map="A"/>
  <method class="com.monitev.devices.dto.DeviceDataDTO" name="java.lang.String getNombreVariable()" map="B"/>
  <method class="com.monitev.devices.dto.DeviceDataDTO" name="void setValorVariable(java.lang.String)" map="B"/>
  <method class="com.monitev.devices.dto.DeviceDataDTO" name="java.lang.String getValorVariable()" map="C"/>
  <class name="com.monitev.devices.dto.RequestDataDTO" map="B"/>
  <field class="com.monitev.devices.dto.RequestDataDTO" name="password" map="A"/>
  <field class="com.monitev.devices.dto.RequestDataDTO" name="deviceId" map="B"/>
  <field class="com.monitev.devices.dto.RequestDataDTO" name="tokenDevice" map="C"/>
  <field class="com.monitev.devices.dto.RequestDataDTO" name="username" map="D"/>
  <field class="com.monitev.devices.dto.RequestDataDTO" name="serialVersionUID" map="E"/>
  <method class="com.monitev.devices.dto.RequestDataDTO" name="void setDeviceId(java.lang.String)" map="A"/>
  <method class="com.monitev.devices.dto.RequestDataDTO" name="void setPassword(java.lang.String)" map="B"/>
  <method class="com.monitev.devices.dto.RequestDataDTO" name="void setUsername(java.lang.String)" map="C"/>
  <method class="com.monitev.devices.dto.RequestDataDTO" name="java.lang.String getUsername()" map="A"/>
  <method class="com.monitev.devices.dto.RequestDataDTO" name="void setTokenDevice(java.lang.String)" map="D"/>
  <method class="com.monitev.devices.dto.RequestDataDTO" name="java.lang.String getPassword()" map="B"/>
  <method class="com.monitev.devices.dto.RequestDataDTO" name="java.lang.String getDeviceId()" map="C"/>
  <method class="com.monitev.devices.dto.RequestDataDTO" name="java.lang.String getTokenDevice()" map="D"/>
  <package name="org" map="A"/>
  <package name="org.springframework" map="A"/>
  <package name="org.springframework.boot" map="A"/>
  <package name="org.springframework.boot.loader" map="A"/>
  <package name="org.springframework.boot.loader.util" map="A"/>
  <class name="org.springframework.boot.loader.util.SystemPropertyUtils" map="A"/>
  <field class="org.springframework.boot.loader.util.SystemPropertyUtils" name="SIMPLE_PREFIX" map="A"/>
  <field class="org.springframework.boot.loader.util.SystemPropertyUtils" name="PLACEHOLDER_PREFIX" map="B"/>
  <field class="org.springframework.boot.loader.util.SystemPropertyUtils" name="VALUE_SEPARATOR" map="C"/>
  <field class="org.springframework.boot.loader.util.SystemPropertyUtils" name="PLACEHOLDER_SUFFIX" map="D"/>
  <method class="org.springframework.boot.loader.util.SystemPropertyUtils" name="boolean substringMatch(java.lang.CharSequence, int, java.lang.CharSequence)" map="A"/>
  <method class="org.springframework.boot.loader.util.SystemPropertyUtils" name="int findPlaceholderEndIndex(java.lang.CharSequence, int)" map="A"/>
  <method class="org.springframework.boot.loader.util.SystemPropertyUtils" name="java.lang.String getProperty(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.util.SystemPropertyUtils" name="java.lang.String resolvePlaceholders(java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.util.SystemPropertyUtils" name="java.lang.String parseStringValue(java.util.Properties, java.lang.String, java.lang.String, java.util.Set)" map="A"/>
  <method class="org.springframework.boot.loader.util.SystemPropertyUtils" name="java.lang.String getProperty(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.util.SystemPropertyUtils" name="java.lang.String getProperty(java.lang.String)" map="B"/>
  <method class="org.springframework.boot.loader.util.SystemPropertyUtils" name="java.lang.String resolvePlaceholders(java.util.Properties, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.util.SystemPropertyUtils" name="java.lang.String resolvePlaceholder(java.util.Properties, java.lang.String, java.lang.String)" map="A"/>
  <package name="org.springframework.boot.loader.archive" map="B"/>
  <class name="org.springframework.boot.loader.archive.Archive$Entry" map="_A"/>
  <method class="org.springframework.boot.loader.archive.Archive$Entry" name="java.lang.String getName()" map="A"/>
  <method class="org.springframework.boot.loader.archive.Archive$Entry" name="boolean isDirectory()" map="B"/>
  <class name="org.springframework.boot.loader.archive.Archive$EntryFilter" map="_B"/>
  <method class="org.springframework.boot.loader.archive.Archive$EntryFilter" name="boolean matches(org.springframework.boot.loader.archive.Archive$Entry)" map="A"/>
  <class name="org.springframework.boot.loader.archive.Archive" map="A"/>
  <method class="org.springframework.boot.loader.archive.Archive" name="boolean lambda$getNestedArchives$0(org.springframework.boot.loader.archive.Archive$EntryFilter, org.springframework.boot.loader.archive.Archive$EntryFilter, org.springframework.boot.loader.archive.Archive$Entry)" map="A"/>
  <method class="org.springframework.boot.loader.archive.Archive" name="boolean isExploded()" map="A"/>
  <method class="org.springframework.boot.loader.archive.Archive" name="void close()" map="close"/>
  <method class="org.springframework.boot.loader.archive.Archive" name="java.util.Iterator iterator()" map="iterator"/>
  <method class="org.springframework.boot.loader.archive.Archive" name="java.net.URL getUrl()" map="B"/>
  <method class="org.springframework.boot.loader.archive.Archive" name="java.util.jar.Manifest getManifest()" map="C"/>
  <method class="org.springframework.boot.loader.archive.Archive" name="java.util.List getNestedArchives(org.springframework.boot.loader.archive.Archive$EntryFilter)" map="A"/>
  <method class="org.springframework.boot.loader.archive.Archive" name="void forEach(java.util.function.Consumer)" map="forEach"/>
  <method class="org.springframework.boot.loader.archive.Archive" name="java.util.Iterator getNestedArchives(org.springframework.boot.loader.archive.Archive$EntryFilter, org.springframework.boot.loader.archive.Archive$EntryFilter)" map="A"/>
  <method class="org.springframework.boot.loader.archive.Archive" name="java.util.Spliterator spliterator()" map="spliterator"/>
  <class name="org.springframework.boot.loader.archive.ExplodedArchive$EntryIterator" map="_A"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$EntryIterator" name="java.lang.Object adapt(org.springframework.boot.loader.archive.ExplodedArchive$FileEntry)" map="B"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$EntryIterator" name="org.springframework.boot.loader.archive.Archive$Entry adapt(org.springframework.boot.loader.archive.ExplodedArchive$FileEntry)" map="D"/>
  <class name="org.springframework.boot.loader.archive.ExplodedArchive$ArchiveIterator" map="_B"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$ArchiveIterator" name="java.lang.Object adapt(org.springframework.boot.loader.archive.ExplodedArchive$FileEntry)" map="B"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$ArchiveIterator" name="org.springframework.boot.loader.archive.Archive adapt(org.springframework.boot.loader.archive.ExplodedArchive$FileEntry)" map="C"/>
  <class name="org.springframework.boot.loader.archive.ExplodedArchive$SimpleJarFileArchive" map="_C"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive$SimpleJarFileArchive" name="url" map="A"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$SimpleJarFileArchive" name="java.util.Iterator iterator()" map="iterator"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$SimpleJarFileArchive" name="java.net.URL getUrl()" map="B"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$SimpleJarFileArchive" name="java.util.Iterator getNestedArchives(org.springframework.boot.loader.archive.Archive$EntryFilter, org.springframework.boot.loader.archive.Archive$EntryFilter)" map="A"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$SimpleJarFileArchive" name="java.util.jar.Manifest getManifest()" map="C"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$SimpleJarFileArchive" name="java.lang.String toString()" map="toString"/>
  <class name="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" map="_D"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="stack" map="A"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="root" map="B"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="rootUrl" map="C"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="searchFilter" map="D"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="recursive" map="E"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="entryComparator" map="F"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="current" map="G"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="includeFilter" map="H"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="org.springframework.boot.loader.archive.ExplodedArchive$FileEntry getFileEntry(java.io.File)" map="A"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="java.util.Iterator listFiles(java.io.File)" map="B"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="boolean hasNext()" map="hasNext"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="void remove()" map="remove"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="boolean isListable(org.springframework.boot.loader.archive.ExplodedArchive$FileEntry)" map="A"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="java.lang.Object adapt(org.springframework.boot.loader.archive.ExplodedArchive$FileEntry)" map="B"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="org.springframework.boot.loader.archive.ExplodedArchive$FileEntry poll()" map="A"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator" name="java.lang.Object next()" map="next"/>
  <class name="org.springframework.boot.loader.archive.ExplodedArchive$FileEntry" map="_E"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive$FileEntry" name="url" map="A"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive$FileEntry" name="name" map="B"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive$FileEntry" name="file" map="C"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$FileEntry" name="java.net.URL getUrl()" map="C"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$FileEntry" name="java.io.File getFile()" map="D"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$FileEntry" name="java.lang.String getName()" map="A"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive$FileEntry" name="boolean isDirectory()" map="B"/>
  <class name="org.springframework.boot.loader.archive.ExplodedArchive" map="B"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive" name="root" map="B"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive" name="SKIPPED_NAMES" map="C"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive" name="recursive" map="D"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive" name="manifest" map="E"/>
  <field class="org.springframework.boot.loader.archive.ExplodedArchive" name="manifestFile" map="F"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive" name="boolean isExploded()" map="A"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive" name="java.io.File getManifestFile(java.io.File)" map="A"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive" name="java.util.Iterator iterator()" map="iterator"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive" name="java.net.URL getUrl()" map="B"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive" name="java.util.jar.Manifest getManifest()" map="C"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive" name="java.lang.String toString()" map="toString"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive" name="java.util.Iterator getNestedArchives(org.springframework.boot.loader.archive.Archive$EntryFilter, org.springframework.boot.loader.archive.Archive$EntryFilter)" map="A"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive" name="org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)" map="A"/>
  <method class="org.springframework.boot.loader.archive.ExplodedArchive" name="java.util.Set access$000()" map="D"/>
  <class name="org.springframework.boot.loader.archive.JarFileArchive$EntryIterator" map="_A"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive$EntryIterator" name="java.lang.Object adapt(org.springframework.boot.loader.archive.Archive$Entry)" map="A"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive$EntryIterator" name="org.springframework.boot.loader.archive.Archive$Entry adapt(org.springframework.boot.loader.archive.Archive$Entry)" map="C"/>
  <class name="org.springframework.boot.loader.archive.JarFileArchive$NestedArchiveIterator" map="_B"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive$NestedArchiveIterator" name="this$0" map="E"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive$NestedArchiveIterator" name="java.lang.Object adapt(org.springframework.boot.loader.archive.Archive$Entry)" map="A"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive$NestedArchiveIterator" name="org.springframework.boot.loader.archive.Archive adapt(org.springframework.boot.loader.archive.Archive$Entry)" map="B"/>
  <class name="org.springframework.boot.loader.archive.JarFileArchive$JarFileEntry" map="_C"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive$JarFileEntry" name="jarEntry" map="D"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive$JarFileEntry" name="java.lang.String getName()" map="A"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive$JarFileEntry" name="boolean isDirectory()" map="B"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive$JarFileEntry" name="java.util.jar.JarEntry getJarEntry()" map="E"/>
  <class name="org.springframework.boot.loader.archive.JarFileArchive$AbstractIterator" map="_D"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive$AbstractIterator" name="searchFilter" map="A"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive$AbstractIterator" name="iterator" map="B"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive$AbstractIterator" name="current" map="C"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive$AbstractIterator" name="includeFilter" map="D"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive$AbstractIterator" name="java.lang.Object adapt(org.springframework.boot.loader.archive.Archive$Entry)" map="A"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive$AbstractIterator" name="boolean hasNext()" map="hasNext"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive$AbstractIterator" name="org.springframework.boot.loader.archive.Archive$Entry poll()" map="A"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive$AbstractIterator" name="java.lang.Object next()" map="next"/>
  <class name="org.springframework.boot.loader.archive.JarFileArchive" map="C"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive" name="tempUnpackDirectory" map="G"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive" name="url" map="H"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive" name="FILE_PERMISSIONS" map="I"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive" name="BUFFER_SIZE" map="J"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive" name="DIRECTORY_PERMISSIONS" map="K"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive" name="UNPACK_MARKER" map="L"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive" name="NO_FILE_ATTRIBUTES" map="M"/>
  <field class="org.springframework.boot.loader.archive.JarFileArchive" name="jarFile" map="N"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="java.nio.file.attribute.FileAttribute[] getFileAttributes(java.nio.file.FileSystem, java.util.EnumSet)" map="A"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="void close()" map="close"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="java.util.Iterator iterator()" map="iterator"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="void createFile(java.nio.file.Path)" map="A"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="java.nio.file.Path createUnpackDirectory(java.nio.file.Path)" map="B"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="java.net.URL getUrl()" map="B"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="java.nio.file.Path getTempUnpackDirectory()" map="E"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="java.util.jar.Manifest getManifest()" map="C"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(java.util.jar.JarEntry)" map="A"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="java.lang.String toString()" map="toString"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="java.util.Iterator getNestedArchives(org.springframework.boot.loader.archive.Archive$EntryFilter, org.springframework.boot.loader.archive.Archive$EntryFilter)" map="A"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="org.springframework.boot.loader.archive.Archive getNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)" map="B"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="void createDirectory(java.nio.file.Path)" map="C"/>
  <method class="org.springframework.boot.loader.archive.JarFileArchive" name="void unpack(java.util.jar.JarEntry, java.nio.file.Path)" map="A"/>
  <package name="org.springframework.boot.loader.data" map="C"/>
  <class name="org.springframework.boot.loader.data.RandomAccessData" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessData" name="org.springframework.boot.loader.data.RandomAccessData getSubsection(long, long)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessData" name="long getSize()" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessData" name="byte[] read()" map="B"/>
  <method class="org.springframework.boot.loader.data.RandomAccessData" name="java.io.InputStream getInputStream()" map="C"/>
  <method class="org.springframework.boot.loader.data.RandomAccessData" name="byte[] read(long, long)" map="B"/>
  <class name="org.springframework.boot.loader.data.RandomAccessDataFile$1" map="1"/>
  <class name="org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream" map="_A"/>
  <field class="org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream" name="this$0" map="A"/>
  <field class="org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream" name="position" map="B"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream" name="long skip(long)" map="skip"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream" name="int doRead(byte[], int, int)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream" name="int read()" map="read"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream" name="int read(byte[])" map="read"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream" name="long moveOn(int)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream" name="int available()" map="available"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream" name="int cap(long)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$DataInputStream" name="int read(byte[], int, int)" map="read"/>
  <class name="org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess" map="_B"/>
  <field class="org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess" name="monitor" map="A"/>
  <field class="org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess" name="file" map="B"/>
  <field class="org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess" name="randomAccessFile" map="C"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess" name="int read(byte[], long, int, int)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess" name="java.io.File access$100(org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess" name="void access$500(org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess)" map="B"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess" name="int access$400(org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess, byte[], long, int, int)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess" name="int access$300(org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess, long)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess" name="void close()" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess" name="int readByte(long)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess" name="void openIfNecessary()" map="B"/>
  <class name="org.springframework.boot.loader.data.RandomAccessDataFile" map="B"/>
  <field class="org.springframework.boot.loader.data.RandomAccessDataFile" name="fileAccess" map="A"/>
  <field class="org.springframework.boot.loader.data.RandomAccessDataFile" name="length" map="B"/>
  <field class="org.springframework.boot.loader.data.RandomAccessDataFile" name="offset" map="C"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile" name="org.springframework.boot.loader.data.RandomAccessData getSubsection(long, long)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile" name="void close()" map="D"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile" name="byte[] read(long, long)" map="B"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile" name="byte[] read()" map="B"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile" name="long access$800(org.springframework.boot.loader.data.RandomAccessDataFile)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile" name="int access$700(org.springframework.boot.loader.data.RandomAccessDataFile, byte[], long, int, int)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile" name="int readByte(long)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile" name="int access$600(org.springframework.boot.loader.data.RandomAccessDataFile, long)" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile" name="java.io.File getFile()" map="E"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile" name="long getSize()" map="A"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile" name="java.io.InputStream getInputStream()" map="C"/>
  <method class="org.springframework.boot.loader.data.RandomAccessDataFile" name="int read(byte[], long, int, int)" map="A"/>
  <package name="org.springframework.boot.loader.jarmode" map="D"/>
  <class name="org.springframework.boot.loader.jarmode.JarMode" map="A"/>
  <method class="org.springframework.boot.loader.jarmode.JarMode" name="void run(java.lang.String, java.lang.String[])" map="A"/>
  <method class="org.springframework.boot.loader.jarmode.JarMode" name="boolean accepts(java.lang.String)" map="A"/>
  <class name="org.springframework.boot.loader.jarmode.TestJarMode" map="B"/>
  <method class="org.springframework.boot.loader.jarmode.TestJarMode" name="void run(java.lang.String, java.lang.String[])" map="A"/>
  <method class="org.springframework.boot.loader.jarmode.TestJarMode" name="boolean accepts(java.lang.String)" map="A"/>
  <class name="org.springframework.boot.loader.jarmode.JarModeLauncher" map="C"/>
  <field class="org.springframework.boot.loader.jarmode.JarModeLauncher" name="DISABLE_SYSTEM_EXIT" map="A"/>
  <method class="org.springframework.boot.loader.jarmode.JarModeLauncher" name="void main(java.lang.String[])" map="A"/>
  <package name="org.springframework.boot.loader.jar" map="E"/>
  <class name="org.springframework.boot.loader.jar.JarEntry" map="A"/>
  <field class="org.springframework.boot.loader.jar.JarEntry" name="name" map="J"/>
  <field class="org.springframework.boot.loader.jar.JarEntry" name="index" map="K"/>
  <field class="org.springframework.boot.loader.jar.JarEntry" name="localHeaderOffset" map="L"/>
  <field class="org.springframework.boot.loader.jar.JarEntry" name="certification" map="M"/>
  <field class="org.springframework.boot.loader.jar.JarEntry" name="jarFile" map="N"/>
  <field class="org.springframework.boot.loader.jar.JarEntry" name="headerName" map="O"/>
  <method class="org.springframework.boot.loader.jar.JarEntry" name="java.util.jar.Attributes getAttributes()" map="getAttributes"/>
  <method class="org.springframework.boot.loader.jar.JarEntry" name="java.security.cert.Certificate[] getCertificates()" map="getCertificates"/>
  <method class="org.springframework.boot.loader.jar.JarEntry" name="int getIndex()" map="J"/>
  <method class="org.springframework.boot.loader.jar.JarEntry" name="boolean hasName(java.lang.CharSequence, char)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarEntry" name="java.net.URL getUrl()" map="K"/>
  <method class="org.springframework.boot.loader.jar.JarEntry" name="long getLocalHeaderOffset()" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarEntry" name="org.springframework.boot.loader.jar.JarEntryCertification getCertification()" map="L"/>
  <method class="org.springframework.boot.loader.jar.JarEntry" name="org.springframework.boot.loader.jar.AsciiBytes getAsciiBytesName()" map="M"/>
  <method class="org.springframework.boot.loader.jar.JarEntry" name="java.security.CodeSigner[] getCodeSigners()" map="getCodeSigners"/>
  <class name="org.springframework.boot.loader.jar.CentralDirectoryParser" map="B"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryParser" name="visitors" map="A"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryParser" name="CENTRAL_DIRECTORY_HEADER_BASE_SIZE" map="B"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryParser" name="void visitEnd()" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryParser" name="void visitStart(org.springframework.boot.loader.jar.CentralDirectoryEndRecord, org.springframework.boot.loader.data.RandomAccessData)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryParser" name="org.springframework.boot.loader.data.RandomAccessData parse(org.springframework.boot.loader.data.RandomAccessData, boolean)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryParser" name="void visitFileHeader(long, org.springframework.boot.loader.jar.CentralDirectoryFileHeader)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryParser" name="void parseEntries(org.springframework.boot.loader.jar.CentralDirectoryEndRecord, org.springframework.boot.loader.data.RandomAccessData)" map="B"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryParser" name="org.springframework.boot.loader.jar.CentralDirectoryVisitor addVisitor(org.springframework.boot.loader.jar.CentralDirectoryVisitor)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryParser" name="org.springframework.boot.loader.data.RandomAccessData getArchiveData(org.springframework.boot.loader.jar.CentralDirectoryEndRecord, org.springframework.boot.loader.data.RandomAccessData)" map="C"/>
  <class name="org.springframework.boot.loader.jar.CentralDirectoryVisitor" map="C"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryVisitor" name="void visitEnd()" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryVisitor" name="void visitStart(org.springframework.boot.loader.jar.CentralDirectoryEndRecord, org.springframework.boot.loader.data.RandomAccessData)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryVisitor" name="void visitFileHeader(org.springframework.boot.loader.jar.CentralDirectoryFileHeader, long)" map="A"/>
  <class name="org.springframework.boot.loader.jar.JarEntryFilter" map="D"/>
  <method class="org.springframework.boot.loader.jar.JarEntryFilter" name="org.springframework.boot.loader.jar.AsciiBytes apply(org.springframework.boot.loader.jar.AsciiBytes)" map="A"/>
  <class name="org.springframework.boot.loader.jar.JarFileWrapper" map="E"/>
  <field class="org.springframework.boot.loader.jar.JarFileWrapper" name="parent" map="U"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="java.util.zip.ZipEntry getEntry(java.lang.String)" map="getEntry"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="java.util.stream.Stream stream()" map="stream"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="java.net.URL getUrl()" map="C"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="java.lang.String getComment()" map="getComment"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="java.util.jar.JarEntry getJarEntry(java.lang.String)" map="getJarEntry"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="java.util.jar.Manifest getManifest()" map="getManifest"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="java.lang.String getName()" map="getName"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="org.springframework.boot.loader.jar.AbstractJarFile$JarFileType getType()" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="java.io.InputStream getInputStream(java.util.zip.ZipEntry)" map="getInputStream"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="java.io.InputStream getInputStream()" map="D"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="java.util.Enumeration entries()" map="entries"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="int size()" map="size"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="java.lang.String toString()" map="toString"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="org.springframework.boot.loader.jar.JarFile unwrap(java.util.jar.JarFile)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileWrapper" name="java.security.Permission getPermission()" map="A"/>
  <class name="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator" map="_A"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator" name="ZIP64_LOCSIZE" map="A"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator" name="zip64EndOffset" map="B"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator" name="ZIP64_LOCOFF" map="C"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator" name="SIGNATURE" map="D"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator" name="offset" map="E"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator" name="long access$700(org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator" name="long getZip64EndSize()" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator" name="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator find(org.springframework.boot.loader.data.RandomAccessData, long)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator" name="long access$600(org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator)" map="B"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator" name="long getZip64EndOffset()" map="B"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator" name="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64Locator access$000(org.springframework.boot.loader.data.RandomAccessData, long)" map="B"/>
  <class name="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$1" map="1"/>
  <class name="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" map="_B"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="numberOfRecords" map="A"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="locator" map="B"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="centralDirectoryOffset" map="C"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="ZIP64_ENDOFF" map="D"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="ZIP64_ENDSIZ" map="E"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="centralDirectoryLength" map="F"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="ZIP64_ENDTOT" map="G"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="org.springframework.boot.loader.data.RandomAccessData access$400(org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End, org.springframework.boot.loader.data.RandomAccessData)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="long access$200(org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="long access$300(org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End)" map="B"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="org.springframework.boot.loader.data.RandomAccessData getCentralDirectory(org.springframework.boot.loader.data.RandomAccessData)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="long getSize()" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="int access$500(org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End)" map="C"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord$Zip64End" name="int getNumberOfRecords()" map="B"/>
  <class name="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" map="F"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="MINIMUM_SIZE" map="A"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="COMMENT_LENGTH_OFFSET" map="B"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="MAXIMUM_COMMENT_LENGTH" map="C"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="block" map="D"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="offset" map="E"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="zip64End" map="F"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="MAXIMUM_SIZE" map="G"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="SIGNATURE" map="H"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="READ_BLOCK_SIZE" map="I"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="size" map="J"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="long getStartOfArchive(org.springframework.boot.loader.data.RandomAccessData)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="boolean isZip64()" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="org.springframework.boot.loader.data.RandomAccessData getCentralDirectory(org.springframework.boot.loader.data.RandomAccessData)" map="B"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="byte[] createBlockFromEndOfData(org.springframework.boot.loader.data.RandomAccessData, int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="boolean isValid()" map="B"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="java.lang.String getComment()" map="C"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryEndRecord" name="int getNumberOfRecords()" map="D"/>
  <class name="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" map="_A"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" name="name" map="A"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" name="contentType" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" name="java.lang.String getContentType()" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" name="java.lang.String deduceContentType()" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" name="void write(java.lang.String, java.io.ByteArrayOutputStream)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" name="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName get(org.springframework.boot.loader.jar.StringSequence)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" name="java.lang.String toString()" map="toString"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" name="org.springframework.boot.loader.jar.StringSequence decode(org.springframework.boot.loader.jar.StringSequence)" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" name="char decodeEscapeSequence(java.lang.String, int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" name="java.lang.CharSequence toCharSequence()" map="C"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" name="boolean isEmpty()" map="D"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName" name="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName get(org.springframework.boot.loader.jar.StringSequence, int)" map="A"/>
  <class name="org.springframework.boot.loader.jar.JarURLConnection$1" map="1"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection$1" name="java.net.URLConnection openConnection(java.net.URL)" map="openConnection"/>
  <class name="org.springframework.boot.loader.jar.JarURLConnection$ConnectionInputStream" map="_B"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection$ConnectionInputStream" name="this$0" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection$ConnectionInputStream" name="void close()" map="close"/>
  <class name="org.springframework.boot.loader.jar.JarURLConnection" map="G"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection" name="jarFile" map="A"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection" name="SEPARATOR" map="B"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection" name="jarEntry" map="C"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection" name="jarEntryName" map="D"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection" name="FILE_NOT_FOUND_EXCEPTION" map="E"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection" name="EMPTY_JAR_URL" map="F"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection" name="EMPTY_JAR_ENTRY_NAME" map="G"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection" name="jarFileUrl" map="H"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection" name="NOT_FOUND_CONNECTION_EXCEPTION" map="I"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection" name="NOT_FOUND_CONNECTION" map="J"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection" name="useFastExceptions" map="K"/>
  <field class="org.springframework.boot.loader.jar.JarURLConnection" name="permission" map="L"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="org.springframework.boot.loader.jar.AbstractJarFile access$000(org.springframework.boot.loader.jar.JarURLConnection)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="java.lang.Object getContent()" map="getContent"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="java.io.InputStream getInputStream()" map="getInputStream"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="void connect()" map="connect"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="org.springframework.boot.loader.jar.JarURLConnection get(java.net.URL, org.springframework.boot.loader.jar.JarFile)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="void setUseFastExceptions(boolean)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="java.util.jar.JarFile getJarFile()" map="getJarFile"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="int indexOfRootSpec(org.springframework.boot.loader.jar.StringSequence, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="java.net.URL getJarFileURL()" map="getJarFileURL"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="java.lang.String getEntryName()" map="getEntryName"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="org.springframework.boot.loader.jar.JarURLConnection notFound()" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="int getContentLength()" map="getContentLength"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="long getLastModified()" map="getLastModified"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="long getContentLengthLong()" map="getContentLengthLong"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="java.util.jar.JarEntry getJarEntry()" map="getJarEntry"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="java.security.Permission getPermission()" map="getPermission"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="org.springframework.boot.loader.jar.JarURLConnection$JarEntryName access$100()" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="java.net.URL buildJarFileUrl()" map="C"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="void throwFileNotFound(java.lang.Object, org.springframework.boot.loader.jar.AbstractJarFile)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="org.springframework.boot.loader.jar.JarURLConnection notFound(org.springframework.boot.loader.jar.JarFile, org.springframework.boot.loader.jar.JarURLConnection$JarEntryName)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarURLConnection" name="java.lang.String getContentType()" map="getContentType"/>
  <class name="org.springframework.boot.loader.jar.JarFile$1" map="1"/>
  <field class="org.springframework.boot.loader.jar.JarFile$1" name="this$0" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFile$1" name="void visitEnd()" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFile$1" name="void visitStart(org.springframework.boot.loader.jar.CentralDirectoryEndRecord, org.springframework.boot.loader.data.RandomAccessData)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFile$1" name="void visitFileHeader(org.springframework.boot.loader.jar.CentralDirectoryFileHeader, long)" map="A"/>
  <class name="org.springframework.boot.loader.jar.JarFile$JarEntryEnumeration" map="_A"/>
  <field class="org.springframework.boot.loader.jar.JarFile$JarEntryEnumeration" name="iterator" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFile$JarEntryEnumeration" name="java.util.jar.JarEntry nextElement()" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFile$JarEntryEnumeration" name="boolean hasMoreElements()" map="hasMoreElements"/>
  <method class="org.springframework.boot.loader.jar.JarFile$JarEntryEnumeration" name="java.lang.Object nextElement()" map="nextElement"/>
  <class name="org.springframework.boot.loader.jar.JarFile" map="H"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="comment" map="A"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="MANIFEST_NAME" map="B"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="READ_ACTION" map="C"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="rootFile" map="D"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="closed" map="E"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="PROTOCOL_HANDLER" map="F"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="manifest" map="G"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="type" map="H"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="url" map="I"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="wrapper" map="J"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="pathFromRoot" map="K"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="signed" map="L"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="HANDLERS_PACKAGE" map="M"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="entries" map="N"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="manifestSupplier" map="O"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="SIGNATURE_FILE_EXTENSION" map="P"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="nestedJars" map="Q"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="urlString" map="R"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="META_INF" map="S"/>
  <field class="org.springframework.boot.loader.jar.JarFile" name="data" map="T"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.JarFile getNestedJarFile(org.springframework.boot.loader.jar.JarEntry)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="void clearCache()" map="E"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.data.RandomAccessDataFile getRootJarFile()" map="F"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.util.jar.Manifest getManifest()" map="getManifest"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.lang.String getPathFromRoot()" map="G"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.util.jar.JarEntry getJarEntry(java.lang.String)" map="getJarEntry"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.lang.String getComment()" map="getComment"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.JarEntry getJarEntry(java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.util.zip.ZipEntry getEntry(java.lang.String)" map="getEntry"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.lang.String getUrlString()" map="H"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.AbstractJarFile$JarFileType getType()" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="void close()" map="close"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.CentralDirectoryVisitor centralDirectoryVisitor()" map="I"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.AsciiBytes lambda$createJarFileFromDirectoryEntry$1(org.springframework.boot.loader.jar.AsciiBytes, org.springframework.boot.loader.jar.AsciiBytes)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.JarFile createJarFileFromEntry(org.springframework.boot.loader.jar.JarEntry)" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.util.Enumeration entries()" map="entries"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.JarFile createJarFileFromFileEntry(org.springframework.boot.loader.jar.JarEntry)" map="C"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.lang.String access$002(org.springframework.boot.loader.jar.JarFile, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.JarEntryCertification getCertification(org.springframework.boot.loader.jar.JarEntry)" map="D"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.net.URL getUrl()" map="C"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.lang.String toString()" map="toString"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.JarFileWrapper getWrapper()" map="J"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="void registerUrlProtocolHandler()" map="K"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.io.InputStream getInputStream(java.lang.String)" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.JarEntry getJarEntry(java.lang.CharSequence)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.AsciiBytes access$200()" map="L"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="boolean containsEntry(java.lang.String)" map="C"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="void ensureOpen()" map="M"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.lang.String getName()" map="getName"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="void resetCachedUrlHandlers()" map="N"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.data.RandomAccessData getData()" map="O"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="int size()" map="size"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.io.InputStream getInputStream()" map="D"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.JarFile createJarFileFromDirectoryEntry(org.springframework.boot.loader.jar.JarEntry)" map="E"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.security.Permission getPermission()" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.io.InputStream getInputStream(java.util.zip.ZipEntry)" map="getInputStream"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="boolean isSigned()" map="P"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="boolean isClosed()" map="Q"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.util.jar.Manifest lambda$new$0()" map="R"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.JarFile getNestedJarFile(java.util.zip.ZipEntry)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.util.Iterator iterator()" map="iterator"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="org.springframework.boot.loader.jar.AsciiBytes access$100()" map="S"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="java.util.stream.Stream stream()" map="stream"/>
  <method class="org.springframework.boot.loader.jar.JarFile" name="boolean access$302(org.springframework.boot.loader.jar.JarFile, boolean)" map="A"/>
  <class name="org.springframework.boot.loader.jar.ZipInflaterInputStream" map="I"/>
  <field class="org.springframework.boot.loader.jar.ZipInflaterInputStream" name="extraBytesWritten" map="A"/>
  <field class="org.springframework.boot.loader.jar.ZipInflaterInputStream" name="available" map="B"/>
  <method class="org.springframework.boot.loader.jar.ZipInflaterInputStream" name="int getInflaterBufferSize(long)" map="A"/>
  <method class="org.springframework.boot.loader.jar.ZipInflaterInputStream" name="void fill()" map="fill"/>
  <method class="org.springframework.boot.loader.jar.ZipInflaterInputStream" name="void close()" map="close"/>
  <method class="org.springframework.boot.loader.jar.ZipInflaterInputStream" name="int available()" map="available"/>
  <method class="org.springframework.boot.loader.jar.ZipInflaterInputStream" name="int read(byte[], int, int)" map="read"/>
  <class name="org.springframework.boot.loader.jar.JarFileEntries$Zip64Offsets" map="_A"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries$Zip64Offsets" name="offsets" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$Zip64Offsets" name="void set(int, long)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$Zip64Offsets" name="void swap(int, int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$Zip64Offsets" name="long get(int)" map="A"/>
  <class name="org.springframework.boot.loader.jar.JarFileEntries$EntryIterator" map="_B"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries$EntryIterator" name="this$0" map="A"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries$EntryIterator" name="index" map="B"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries$EntryIterator" name="validator" map="C"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$EntryIterator" name="org.springframework.boot.loader.jar.JarEntry next()" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$EntryIterator" name="boolean hasNext()" map="hasNext"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$EntryIterator" name="java.lang.Object next()" map="next"/>
  <class name="org.springframework.boot.loader.jar.JarFileEntries$Offsets" map="_C"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$Offsets" name="org.springframework.boot.loader.jar.JarFileEntries$Offsets from(org.springframework.boot.loader.jar.CentralDirectoryEndRecord)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$Offsets" name="void set(int, long)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$Offsets" name="void swap(int, int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$Offsets" name="long get(int)" map="A"/>
  <class name="org.springframework.boot.loader.jar.JarFileEntries$1" map="1"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries$1" name="this$0" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$1" name="boolean removeEldestEntry(java.util.Map$Entry)" map="removeEldestEntry"/>
  <class name="org.springframework.boot.loader.jar.JarFileEntries$ZipOffsets" map="_D"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries$ZipOffsets" name="offsets" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$ZipOffsets" name="void set(int, long)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$ZipOffsets" name="void swap(int, int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries$ZipOffsets" name="long get(int)" map="A"/>
  <class name="org.springframework.boot.loader.jar.JarFileEntries" map="J"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="centralDirectoryData" map="B"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="centralDirectoryOffsets" map="C"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="SLASH" map="D"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="multiReleaseJar" map="E"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="BASE_VERSION" map="F"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="positions" map="G"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="certifications" map="H"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="jarFile" map="I"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="filter" map="J"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="NO_SUFFIX" map="K"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="size" map="L"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="RUNTIME_VERSION" map="M"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="MULTI_RELEASE" map="N"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="entriesCache" map="O"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="ENTRY_CACHE_SIZE" map="P"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="META_INF_PREFIX" map="Q"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="hashCodes" map="R"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="LOCAL_FILE_HEADER_SIZE" map="S"/>
  <field class="org.springframework.boot.loader.jar.JarFileEntries" name="NO_VALIDATION" map="T"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="int getEntryIndex(java.lang.CharSequence)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="int getFirstIndex(int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="java.util.Iterator iterator(java.lang.Runnable)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="void visitStart(org.springframework.boot.loader.jar.CentralDirectoryEndRecord, org.springframework.boot.loader.data.RandomAccessData)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="void swap(int[], int, int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="void swap(int, int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="org.springframework.boot.loader.jar.FileHeader doGetEntry(java.lang.CharSequence, java.lang.Class, boolean, org.springframework.boot.loader.jar.AsciiBytes)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="org.springframework.boot.loader.jar.FileHeader getEntry(int, java.lang.Class, boolean, org.springframework.boot.loader.jar.AsciiBytes)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="void clearCache()" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="java.io.InputStream getInputStream(org.springframework.boot.loader.jar.FileHeader)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="java.util.Iterator iterator()" map="iterator"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="boolean isMultiReleaseJar()" map="C"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="org.springframework.boot.loader.jar.JarEntryCertification getCertification(org.springframework.boot.loader.jar.JarEntry)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="int getSize()" map="D"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="boolean isMetaInfEntry(java.lang.CharSequence)" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="org.springframework.boot.loader.jar.FileHeader getEntry(java.lang.CharSequence, java.lang.Class, boolean)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="void add(org.springframework.boot.loader.jar.AsciiBytes, long)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="int[] access$200(org.springframework.boot.loader.jar.JarFileEntries)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="int access$100(org.springframework.boot.loader.jar.JarFileEntries)" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="void visitEnd()" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="org.springframework.boot.loader.jar.FileHeader access$300(org.springframework.boot.loader.jar.JarFileEntries, int, java.lang.Class, boolean, org.springframework.boot.loader.jar.AsciiBytes)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="org.springframework.boot.loader.jar.JarEntry getEntry(java.lang.CharSequence)" map="C"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="void access$600(int[], int, int)" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="void sort(int, int)" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="void access$700(long[], int, int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="void lambda$static$0()" map="E"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="org.springframework.boot.loader.data.RandomAccessData getEntryData(java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="void visitFileHeader(org.springframework.boot.loader.jar.CentralDirectoryFileHeader, long)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="org.springframework.boot.loader.jar.FileHeader getEntry(int, java.lang.CharSequence, char, java.lang.Class, boolean, org.springframework.boot.loader.jar.AsciiBytes)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="org.springframework.boot.loader.data.RandomAccessData getEntryData(org.springframework.boot.loader.jar.FileHeader)" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="void swap(long[], int, int)" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="boolean containsEntry(java.lang.CharSequence)" map="D"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="org.springframework.boot.loader.jar.AsciiBytes applyFilter(org.springframework.boot.loader.jar.AsciiBytes)" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarFileEntries" name="java.io.InputStream getInputStream(java.lang.String)" map="B"/>
  <class name="org.springframework.boot.loader.jar.Handler" map="K"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="jarFile" map="A"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="rootFileCache" map="B"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="SEPARATOR" map="C"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="fallbackHandler" map="D"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="jarContextUrl" map="E"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="FILE_PROTOCOL" map="F"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="CURRENT_DIR" map="G"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="FALLBACK_HANDLERS" map="H"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="PARENT_DIR" map="I"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="JAR_PROTOCOL" map="J"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="CURRENT_DIR_PATTERN" map="K"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="PROTOCOL_HANDLER" map="L"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="TOMCAT_WARFILE_PROTOCOL" map="M"/>
  <field class="org.springframework.boot.loader.jar.Handler" name="SEPARATOR_PATTERN" map="N"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="int hashCode(java.net.URL)" map="hashCode"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="void addToRootFileCache(java.io.File, org.springframework.boot.loader.jar.JarFile)" map="A"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="void setUseFastConnectionExceptions(boolean)" map="A"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.net.URLStreamHandler getFallbackHandler()" map="A"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="boolean isTomcatWarUrl(java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="void resetCachedUrlHandlers()" map="B"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.lang.String replaceCurrentDir(java.lang.String)" map="B"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="void log(boolean, java.lang.String, java.lang.Exception)" map="A"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="boolean sameFile(java.net.URL, java.net.URL)" map="sameFile"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.lang.String replaceParentDir(java.lang.String)" map="C"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.net.URLConnection openFallbackConnection(java.net.URL, java.lang.Exception)" map="A"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="org.springframework.boot.loader.jar.JarFile getRootJarFileFromUrl(java.net.URL)" map="A"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.lang.String trimToJarRoot(java.lang.String)" map="D"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="void parseURL(java.net.URL, java.lang.String, int, int)" map="parseURL"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="void captureJarContextUrl()" map="C"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.lang.String canonicalize(java.lang.String)" map="E"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="boolean isUrlInJarFile(java.net.URL, org.springframework.boot.loader.jar.JarFile)" map="A"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="org.springframework.boot.loader.jar.JarFile getRootJarFile(java.lang.String)" map="F"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.lang.String normalize(java.lang.String)" map="G"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.net.URLConnection openFallbackTomcatConnection(java.net.URL)" map="B"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="void setFile(java.net.URL, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="boolean canResetCachedUrlHandlers()" map="D"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="int hashCode(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.net.URLConnection openFallbackContextConnection(java.net.URL)" map="C"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.net.URLConnection openFallbackHandlerConnection(java.net.URL)" map="D"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.net.URLConnection openConnection(java.net.URL)" map="openConnection"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.lang.String getFileFromContext(java.net.URL, java.lang.String)" map="B"/>
  <method class="org.springframework.boot.loader.jar.Handler" name="java.lang.String getFileFromSpec(java.lang.String)" map="H"/>
  <class name="org.springframework.boot.loader.jar.JarEntryCertification" map="L"/>
  <field class="org.springframework.boot.loader.jar.JarEntryCertification" name="codeSigners" map="A"/>
  <field class="org.springframework.boot.loader.jar.JarEntryCertification" name="certificates" map="B"/>
  <field class="org.springframework.boot.loader.jar.JarEntryCertification" name="NONE" map="C"/>
  <method class="org.springframework.boot.loader.jar.JarEntryCertification" name="java.security.CodeSigner[] getCodeSigners()" map="A"/>
  <method class="org.springframework.boot.loader.jar.JarEntryCertification" name="java.security.cert.Certificate[] getCertificates()" map="B"/>
  <method class="org.springframework.boot.loader.jar.JarEntryCertification" name="org.springframework.boot.loader.jar.JarEntryCertification from(java.util.jar.JarEntry)" map="A"/>
  <class name="org.springframework.boot.loader.jar.AsciiBytes" map="M"/>
  <field class="org.springframework.boot.loader.jar.AsciiBytes" name="bytes" map="A"/>
  <field class="org.springframework.boot.loader.jar.AsciiBytes" name="INITIAL_BYTE_BITMASK" map="B"/>
  <field class="org.springframework.boot.loader.jar.AsciiBytes" name="string" map="C"/>
  <field class="org.springframework.boot.loader.jar.AsciiBytes" name="SUBSEQUENT_BYTE_BITMASK" map="D"/>
  <field class="org.springframework.boot.loader.jar.AsciiBytes" name="EMPTY_STRING" map="E"/>
  <field class="org.springframework.boot.loader.jar.AsciiBytes" name="length" map="F"/>
  <field class="org.springframework.boot.loader.jar.AsciiBytes" name="hash" map="G"/>
  <field class="org.springframework.boot.loader.jar.AsciiBytes" name="offset" map="H"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="boolean startsWith(org.springframework.boot.loader.jar.AsciiBytes)" map="A"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="char getChar(java.lang.CharSequence, char, int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="org.springframework.boot.loader.jar.AsciiBytes substring(int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="int hashCode()" map="hashCode"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="java.lang.String toString(byte[])" map="A"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="int getNumberOfUtfBytes(int)" map="B"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="int hashCode(int, char)" map="A"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="int hashCode(java.lang.CharSequence)" map="A"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="org.springframework.boot.loader.jar.AsciiBytes substring(int, int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="boolean endsWith(org.springframework.boot.loader.jar.AsciiBytes)" map="B"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="int length()" map="A"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="boolean matches(java.lang.CharSequence, char)" map="A"/>
  <method class="org.springframework.boot.loader.jar.AsciiBytes" name="java.lang.String toString()" map="toString"/>
  <class name="org.springframework.boot.loader.jar.FileHeader" map="N"/>
  <method class="org.springframework.boot.loader.jar.FileHeader" name="boolean hasName(java.lang.CharSequence, char)" map="A"/>
  <method class="org.springframework.boot.loader.jar.FileHeader" name="int getMethod()" map="getMethod"/>
  <method class="org.springframework.boot.loader.jar.FileHeader" name="long getSize()" map="getSize"/>
  <method class="org.springframework.boot.loader.jar.FileHeader" name="long getCompressedSize()" map="getCompressedSize"/>
  <method class="org.springframework.boot.loader.jar.FileHeader" name="long getLocalHeaderOffset()" map="A"/>
  <class name="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" map="O"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="SLASH" map="A"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="name" map="B"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="NO_COMMENT" map="C"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="extra" map="D"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="localHeaderOffset" map="E"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="header" map="F"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="comment" map="G"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="headerOffset" map="H"/>
  <field class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="NO_EXTRA" map="I"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="long getLocalHeaderOffset()" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="org.springframework.boot.loader.jar.CentralDirectoryFileHeader fromRandomAccessData(org.springframework.boot.loader.data.RandomAccessData, long, org.springframework.boot.loader.jar.JarEntryFilter)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="boolean hasName(java.lang.CharSequence, char)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="int getChronoValue(long, java.time.temporal.ChronoField)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="java.lang.Object clone()" map="clone"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="int getMethod()" map="getMethod"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="org.springframework.boot.loader.jar.AsciiBytes getName()" map="B"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="long decodeMsDosFormatDateTime(long)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="long getTime()" map="C"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="boolean hasExtra()" map="D"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="long getSize()" map="getSize"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="org.springframework.boot.loader.jar.AsciiBytes getComment()" map="E"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="long getCrc()" map="F"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="long getLocalHeaderOffset(long, long, long, byte[])" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="long getCompressedSize()" map="getCompressedSize"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="void load(byte[], int, org.springframework.boot.loader.data.RandomAccessData, long, org.springframework.boot.loader.jar.JarEntryFilter)" map="A"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="org.springframework.boot.loader.jar.CentralDirectoryFileHeader clone()" map="G"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="byte[] getExtra()" map="H"/>
  <method class="org.springframework.boot.loader.jar.CentralDirectoryFileHeader" name="boolean isDirectory()" map="I"/>
  <class name="org.springframework.boot.loader.jar.AbstractJarFile$JarFileType" map="_A"/>
  <field class="org.springframework.boot.loader.jar.AbstractJarFile$JarFileType" name="NESTED_DIRECTORY" map="A"/>
  <field class="org.springframework.boot.loader.jar.AbstractJarFile$JarFileType" name="$VALUES" map="B"/>
  <field class="org.springframework.boot.loader.jar.AbstractJarFile$JarFileType" name="NESTED_JAR" map="C"/>
  <field class="org.springframework.boot.loader.jar.AbstractJarFile$JarFileType" name="DIRECT" map="D"/>
  <method class="org.springframework.boot.loader.jar.AbstractJarFile$JarFileType" name="org.springframework.boot.loader.jar.AbstractJarFile$JarFileType valueOf(java.lang.String)" map="valueOf"/>
  <method class="org.springframework.boot.loader.jar.AbstractJarFile$JarFileType" name="org.springframework.boot.loader.jar.AbstractJarFile$JarFileType[] values()" map="values"/>
  <class name="org.springframework.boot.loader.jar.AbstractJarFile" map="P"/>
  <method class="org.springframework.boot.loader.jar.AbstractJarFile" name="java.security.Permission getPermission()" map="A"/>
  <method class="org.springframework.boot.loader.jar.AbstractJarFile" name="org.springframework.boot.loader.jar.AbstractJarFile$JarFileType getType()" map="B"/>
  <method class="org.springframework.boot.loader.jar.AbstractJarFile" name="java.net.URL getUrl()" map="C"/>
  <method class="org.springframework.boot.loader.jar.AbstractJarFile" name="java.io.InputStream getInputStream()" map="D"/>
  <class name="org.springframework.boot.loader.jar.Bytes" map="Q"/>
  <method class="org.springframework.boot.loader.jar.Bytes" name="long littleEndianValue(byte[], int, int)" map="A"/>
  <class name="org.springframework.boot.loader.jar.StringSequence" map="R"/>
  <field class="org.springframework.boot.loader.jar.StringSequence" name="end" map="A"/>
  <field class="org.springframework.boot.loader.jar.StringSequence" name="source" map="B"/>
  <field class="org.springframework.boot.loader.jar.StringSequence" name="hash" map="C"/>
  <field class="org.springframework.boot.loader.jar.StringSequence" name="start" map="D"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="boolean startsWith(java.lang.String, int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="int hashCode()" map="hashCode"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="char charAt(int)" map="charAt"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="org.springframework.boot.loader.jar.StringSequence subSequence(int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="org.springframework.boot.loader.jar.StringSequence subSequence(int, int)" map="A"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="java.lang.CharSequence subSequence(int, int)" map="subSequence"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="boolean startsWith(java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="int length()" map="length"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="java.lang.String toString()" map="toString"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="int indexOf(java.lang.String, int)" map="B"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="boolean isEmpty()" map="isEmpty"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="int indexOf(char)" map="A"/>
  <method class="org.springframework.boot.loader.jar.StringSequence" name="int indexOf(java.lang.String)" map="B"/>
  <class name="org.springframework.boot.loader.Launcher" map="A"/>
  <field class="org.springframework.boot.loader.Launcher" name="JAR_MODE_LAUNCHER" map="A"/>
  <method class="org.springframework.boot.loader.Launcher" name="boolean isExploded()" map="A"/>
  <method class="org.springframework.boot.loader.Launcher" name="java.lang.ClassLoader createClassLoader(java.net.URL[])" map="A"/>
  <method class="org.springframework.boot.loader.Launcher" name="java.util.List getClassPathArchives()" map="B"/>
  <method class="org.springframework.boot.loader.Launcher" name="java.util.Iterator getClassPathArchivesIterator()" map="C"/>
  <method class="org.springframework.boot.loader.Launcher" name="java.lang.String getMainClass()" map="D"/>
  <method class="org.springframework.boot.loader.Launcher" name="void launch(java.lang.String[], java.lang.String, java.lang.ClassLoader)" map="A"/>
  <method class="org.springframework.boot.loader.Launcher" name="java.lang.ClassLoader createClassLoader(java.util.List)" map="A"/>
  <method class="org.springframework.boot.loader.Launcher" name="java.lang.ClassLoader createClassLoader(java.util.Iterator)" map="A"/>
  <method class="org.springframework.boot.loader.Launcher" name="org.springframework.boot.loader.archive.Archive getArchive()" map="E"/>
  <method class="org.springframework.boot.loader.Launcher" name="org.springframework.boot.loader.MainMethodRunner createMainMethodRunner(java.lang.String, java.lang.String[], java.lang.ClassLoader)" map="A"/>
  <method class="org.springframework.boot.loader.Launcher" name="void launch(java.lang.String[])" map="A"/>
  <method class="org.springframework.boot.loader.Launcher" name="org.springframework.boot.loader.archive.Archive createArchive()" map="F"/>
  <class name="org.springframework.boot.loader.LaunchedURLClassLoader$DefinePackageCallType" map="_A"/>
  <field class="org.springframework.boot.loader.LaunchedURLClassLoader$DefinePackageCallType" name="MANIFEST" map="A"/>
  <field class="org.springframework.boot.loader.LaunchedURLClassLoader$DefinePackageCallType" name="$VALUES" map="B"/>
  <field class="org.springframework.boot.loader.LaunchedURLClassLoader$DefinePackageCallType" name="ATTRIBUTES" map="C"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader$DefinePackageCallType" name="org.springframework.boot.loader.LaunchedURLClassLoader$DefinePackageCallType[] values()" map="values"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader$DefinePackageCallType" name="org.springframework.boot.loader.LaunchedURLClassLoader$DefinePackageCallType valueOf(java.lang.String)" map="valueOf"/>
  <class name="org.springframework.boot.loader.LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration" map="_B"/>
  <field class="org.springframework.boot.loader.LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration" name="delegate" map="A"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration" name="java.net.URL nextElement()" map="A"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration" name="boolean hasMoreElements()" map="hasMoreElements"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration" name="java.lang.Object nextElement()" map="nextElement"/>
  <class name="org.springframework.boot.loader.LaunchedURLClassLoader" map="B"/>
  <field class="org.springframework.boot.loader.LaunchedURLClassLoader" name="rootArchive" map="A"/>
  <field class="org.springframework.boot.loader.LaunchedURLClassLoader" name="packageLock" map="B"/>
  <field class="org.springframework.boot.loader.LaunchedURLClassLoader" name="definePackageCallType" map="C"/>
  <field class="org.springframework.boot.loader.LaunchedURLClassLoader" name="BUFFER_SIZE" map="D"/>
  <field class="org.springframework.boot.loader.LaunchedURLClassLoader" name="exploded" map="E"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="java.util.Enumeration findResources(java.lang.String)" map="findResources"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="java.lang.Class loadClassInLaunchedClassLoader(java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="java.lang.Class loadClass(java.lang.String, boolean)" map="loadClass"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="java.lang.Object lambda$definePackage$0(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="java.lang.Object doDefinePackage(org.springframework.boot.loader.LaunchedURLClassLoader$DefinePackageCallType, java.util.function.Supplier)" map="A"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="java.lang.Package definePackage(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.net.URL)" map="definePackage"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="void clearCache()" map="A"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="java.util.jar.Manifest getManifest(org.springframework.boot.loader.archive.Archive)" map="A"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="java.lang.Package definePackage(java.lang.String, java.util.jar.Manifest, java.net.URL)" map="definePackage"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="void clearCache(java.net.URLConnection)" map="A"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="void definePackage(java.lang.String, java.lang.String)" map="B"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="java.net.URL findResource(java.lang.String)" map="findResource"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="java.lang.Package lambda$definePackage$2(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.net.URL)" map="A"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="java.lang.Package lambda$definePackage$1(java.lang.String, java.util.jar.Manifest, java.net.URL)" map="A"/>
  <method class="org.springframework.boot.loader.LaunchedURLClassLoader" name="void definePackageIfNecessary(java.lang.String)" map="B"/>
  <class name="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" map="_A"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="this$0" map="A"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="classPathArchives" map="B"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="jarFileArchives" map="C"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="boolean isAbsolutePath(java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="org.springframework.boot.loader.archive.Archive getArchive(java.io.File)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="void close()" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="java.util.Iterator iterator()" map="iterator"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="org.springframework.boot.loader.archive.JarFileArchive getJarFileArchive(java.io.File)" map="B"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="java.util.List asList(java.util.Iterator)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="java.util.List getClassPathArchives(java.lang.String)" map="B"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="void addNestedEntries()" map="B"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="boolean isNestedArchivePath(java.io.File)" map="C"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="void addClassPathArchive(org.springframework.boot.loader.archive.Archive)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives" name="java.util.List getNestedArchives(java.lang.String)" map="C"/>
  <class name="org.springframework.boot.loader.PropertiesLauncher$1" map="1"/>
  <class name="org.springframework.boot.loader.PropertiesLauncher$PrefixMatchingArchiveFilter" map="_B"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher$PrefixMatchingArchiveFilter" name="filter" map="A"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher$PrefixMatchingArchiveFilter" name="prefix" map="B"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$PrefixMatchingArchiveFilter" name="boolean matches(org.springframework.boot.loader.archive.Archive$Entry)" map="A"/>
  <class name="org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter" map="_C"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter" name="DOT_ZIP" map="C"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter" name="DOT_JAR" map="D"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter" name="boolean matches(org.springframework.boot.loader.archive.Archive$Entry)" map="A"/>
  <class name="org.springframework.boot.loader.PropertiesLauncher" map="C"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="WORD_SEPARATOR" map="B"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="classPathArchives" map="C"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="DEBUG" map="D"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="HOME" map="E"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="NESTED_ARCHIVE_SEPARATOR" map="F"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="SET_SYSTEM_PROPERTIES" map="G"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="NO_URLS" map="H"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="NO_PARAMS" map="I"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="CONFIG_NAME" map="J"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="PARENT_ONLY_PARAMS" map="K"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="properties" map="L"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="parent" map="M"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="ARGS" map="N"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="MAIN" map="O"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="paths" map="P"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="CONFIG_LOCATION" map="Q"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="home" map="R"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="PATH" map="S"/>
  <field class="org.springframework.boot.loader.PropertiesLauncher" name="URLS_AND_PARENT_PARAMS" map="T"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.io.InputStream getURLResource(java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="void access$500(org.springframework.boot.loader.PropertiesLauncher, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String access$300(org.springframework.boot.loader.PropertiesLauncher, java.lang.String)" map="B"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String getMainClass()" map="D"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="org.springframework.boot.loader.archive.Archive access$700(org.springframework.boot.loader.PropertiesLauncher)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String toCamelCase(java.lang.CharSequence)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="void loadResource(java.io.InputStream)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String handleUrl(java.lang.String)" map="B"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.io.InputStream getFileResource(java.lang.String)" map="C"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.util.List access$000(org.springframework.boot.loader.PropertiesLauncher)" map="B"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String getProperty(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.util.Iterator getClassPathArchivesIterator()" map="C"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String[] getArgs(java.lang.String[])" map="B"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String access$200(org.springframework.boot.loader.PropertiesLauncher, java.lang.String)" map="C"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String cleanupPath(java.lang.String)" map="D"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="void debug(java.lang.String)" map="E"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="void close()" map="G"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String getPropertyWithDefault(java.lang.String, java.lang.String)" map="B"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="boolean isUrl(java.lang.String)" map="F"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.ClassLoader createClassLoader(java.util.Iterator)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.util.List parsePathsProperty(java.lang.String)" map="G"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.io.InputStream getResource(java.lang.String)" map="H"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String getProperty(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.ClassLoader wrapWithCustomClassLoader(java.lang.ClassLoader, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="void initializePaths()" map="H"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="boolean exists(java.net.URL)" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.io.InputStream getClasspathResource(java.lang.String)" map="I"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="void main(java.lang.String[])" map="C"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.io.File access$400(org.springframework.boot.loader.PropertiesLauncher)" map="C"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String capitalize(java.lang.String)" map="J"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.ClassLoader newClassLoader(java.lang.Class, java.lang.Class[], java.lang.Object[])" map="A"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String getProperty(java.lang.String)" map="K"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.io.File getHomeDirectory()" map="I"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="void initializeProperties()" map="J"/>
  <method class="org.springframework.boot.loader.PropertiesLauncher" name="java.lang.String access$600()" map="K"/>
  <class name="org.springframework.boot.loader.WarLauncher" map="D"/>
  <method class="org.springframework.boot.loader.WarLauncher" name="void main(java.lang.String[])" map="D"/>
  <method class="org.springframework.boot.loader.WarLauncher" name="java.lang.String getArchiveEntryPathPrefix()" map="N"/>
  <method class="org.springframework.boot.loader.WarLauncher" name="boolean isNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)" map="A"/>
  <method class="org.springframework.boot.loader.WarLauncher" name="boolean isPostProcessingClassPathArchives()" map="M"/>
  <class name="org.springframework.boot.loader.JarLauncher" map="E"/>
  <field class="org.springframework.boot.loader.JarLauncher" name="NESTED_ARCHIVE_ENTRY_FILTER" map="Z"/>
  <method class="org.springframework.boot.loader.JarLauncher" name="void main(java.lang.String[])" map="E"/>
  <method class="org.springframework.boot.loader.JarLauncher" name="java.lang.String getArchiveEntryPathPrefix()" map="N"/>
  <method class="org.springframework.boot.loader.JarLauncher" name="boolean isNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)" map="A"/>
  <method class="org.springframework.boot.loader.JarLauncher" name="boolean isPostProcessingClassPathArchives()" map="M"/>
  <method class="org.springframework.boot.loader.JarLauncher" name="boolean lambda$static$0(org.springframework.boot.loader.archive.Archive$Entry)" map="E"/>
  <class name="org.springframework.boot.loader.MainMethodRunner" map="F"/>
  <field class="org.springframework.boot.loader.MainMethodRunner" name="args" map="A"/>
  <field class="org.springframework.boot.loader.MainMethodRunner" name="mainClassName" map="B"/>
  <method class="org.springframework.boot.loader.MainMethodRunner" name="void run()" map="A"/>
  <class name="org.springframework.boot.loader.ExecutableArchiveLauncher" map="G"/>
  <field class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="START_CLASS_ATTRIBUTE" map="U"/>
  <field class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="archive" map="V"/>
  <field class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="classPathIndex" map="W"/>
  <field class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="BOOT_CLASSPATH_INDEX_ATTRIBUTE" map="X"/>
  <field class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="DEFAULT_CLASSPATH_INDEX_FILE_NAME" map="Y"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="boolean isExploded()" map="A"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="java.util.Iterator getClassPathArchivesIterator()" map="C"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="int guessClassPathSize()" map="L"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="boolean isNestedArchive(org.springframework.boot.loader.archive.Archive$Entry)" map="A"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="boolean isEntryIndexed(org.springframework.boot.loader.archive.Archive$Entry)" map="B"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="org.springframework.boot.loader.ClassPathIndexFile getClassPathIndex(org.springframework.boot.loader.archive.Archive)" map="A"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="java.lang.String getMainClass()" map="D"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="void postProcessClassPathArchives(java.util.List)" map="B"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="boolean isPostProcessingClassPathArchives()" map="M"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="java.lang.ClassLoader createClassLoader(java.util.Iterator)" map="A"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="java.lang.String getArchiveEntryPathPrefix()" map="N"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="java.lang.String getClassPathIndexFileLocation(org.springframework.boot.loader.archive.Archive)" map="B"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="org.springframework.boot.loader.archive.Archive getArchive()" map="E"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="boolean isSearchCandidate(org.springframework.boot.loader.archive.Archive$Entry)" map="C"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="boolean lambda$getClassPathArchivesIterator$0(org.springframework.boot.loader.archive.Archive$Entry)" map="D"/>
  <method class="org.springframework.boot.loader.ExecutableArchiveLauncher" name="java.util.Iterator applyClassPathArchivePostProcessing(java.util.Iterator)" map="B"/>
  <class name="org.springframework.boot.loader.ClassPathIndexFile" map="H"/>
  <field class="org.springframework.boot.loader.ClassPathIndexFile" name="lines" map="A"/>
  <field class="org.springframework.boot.loader.ClassPathIndexFile" name="root" map="B"/>
  <method class="org.springframework.boot.loader.ClassPathIndexFile" name="java.util.List getUrls()" map="A"/>
  <method class="org.springframework.boot.loader.ClassPathIndexFile" name="java.net.URL asUrl(java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.ClassPathIndexFile" name="org.springframework.boot.loader.ClassPathIndexFile loadIfPossible(java.net.URL, java.lang.String)" map="A"/>
  <method class="org.springframework.boot.loader.ClassPathIndexFile" name="java.io.File asFile(java.net.URL)" map="A"/>
  <method class="org.springframework.boot.loader.ClassPathIndexFile" name="org.springframework.boot.loader.ClassPathIndexFile loadIfPossible(java.io.File, java.io.File)" map="A"/>
  <method class="org.springframework.boot.loader.ClassPathIndexFile" name="boolean containsEntry(java.lang.String)" map="B"/>
  <method class="org.springframework.boot.loader.ClassPathIndexFile" name="java.lang.String extractName(java.lang.String)" map="C"/>
  <method class="org.springframework.boot.loader.ClassPathIndexFile" name="int size()" map="B"/>
  <method class="org.springframework.boot.loader.ClassPathIndexFile" name="java.util.List loadLines(java.io.InputStream)" map="A"/>
  <method class="org.springframework.boot.loader.ClassPathIndexFile" name="org.springframework.boot.loader.ClassPathIndexFile loadIfPossible(java.io.File, java.lang.String)" map="A"/>
</map>
<!--

<adjust replaceContents="true">
  <resource name="BOOT-INF/classes/application.properties"/>
  <resource name="META-INF/maven/com.monitev/devices/pom.properties"/>
  <resource name="BOOT-INF/classes/credenciales.properties"/>
</adjust>
-->
</yguard>
